// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/0x726f6f6b6965/go-auth/config"
	"github.com/0x726f6f6b6965/go-auth/internal/services"
	"github.com/0x726f6f6b6965/go-auth/internal/storage"
	"github.com/0x726f6f6b6965/go-auth/pkg/cache"
	"github.com/0x726f6f6b6965/go-auth/pkg/jwt-auth"
	"github.com/0x726f6f6b6965/go-auth/pkg/logger"
	"github.com/0x726f6f6b6965/go-auth/protos/user/v1"
)

// Injectors from wire.go:

func initUserService(cfg *config.AppConfig) (v1.UserServiceServer, func(), error) {
	jwtauthConfig := jwtAuthConfig(cfg)
	jwtAuth := jwtauth.NewJWTAuth(jwtauthConfig)
	configDBConfig := dbConfig(cfg)
	db, cleanup, err := storage.NewPostgres(configDBConfig)
	if err != nil {
		return nil, nil, err
	}
	configRedisConfig := redisConfig(cfg)
	cacheCache, cleanup2, err := cache.NewRedis(configRedisConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configLogConfig := logConfig(cfg)
	zapLogger, cleanup3, err := logger.NewLogger(configLogConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userServiceServer := services.NewUserService(jwtAuth, db, cacheCache, zapLogger)
	return userServiceServer, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
