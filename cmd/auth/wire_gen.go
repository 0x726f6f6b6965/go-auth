// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/0x726f6f6b6965/go-auth/api/services"
	"github.com/0x726f6f6b6965/go-auth/config"
	services2 "github.com/0x726f6f6b6965/go-auth/internal/services"
	"github.com/0x726f6f6b6965/go-auth/internal/storage"
	"github.com/0x726f6f6b6965/go-auth/pkg/jwt_auth"
	"github.com/0x726f6f6b6965/go-auth/pkg/logger"
	v1_2 "github.com/0x726f6f6b6965/go-auth/protos/policy/v1"
	"github.com/0x726f6f6b6965/go-auth/protos/user/v1"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func initUserAPI(ser v1.UserServiceServer) (*services.UserAPI, error) {
	servicesUserAPI := services.NewUserAPI(ser)
	return servicesUserAPI, nil
}

func initPolicyAPI(ser v1_2.PolicyServiceServer) (*services.PolicyAPI, error) {
	servicesPolicyAPI := services.NewPolicyAPI(ser)
	return servicesPolicyAPI, nil
}

func initGin(cfg *config.AppConfig) (*gin.Engine, error) {
	engine := InitGin(cfg)
	return engine, nil
}

func initPolicyService(cfg *config.AppConfig) (v1_2.PolicyServiceServer, func(), error) {
	configLogConfig := logConfig(cfg)
	zapLogger, cleanup, err := logger.NewLogger(configLogConfig)
	if err != nil {
		return nil, nil, err
	}
	policyServiceServer := services2.NewPolicyService(zapLogger)
	return policyServiceServer, func() {
		cleanup()
	}, nil
}

func initUserService(cfg *config.AppConfig, auth *jwtauth.JwtAuth) (v1.UserServiceServer, func(), error) {
	configDBConfig := dbConfig(cfg)
	db, err := storage.NewPostgres(configDBConfig)
	if err != nil {
		return nil, nil, err
	}
	configLogConfig := logConfig(cfg)
	zapLogger, cleanup, err := logger.NewLogger(configLogConfig)
	if err != nil {
		return nil, nil, err
	}
	userServiceServer := services2.NewUserService(auth, db, zapLogger)
	return userServiceServer, func() {
		cleanup()
	}, nil
}

func initAuth(cfg *config.AppConfig) *jwtauth.JwtAuth {
	jwtauthConfig := jwtAuthConfig(cfg)
	jwtAuth := jwtauth.NewJWTAuth(jwtauthConfig)
	return jwtAuth
}

func initPolicyGrpcClient(cfg *config.AppConfig) (v1_2.PolicyServiceClient, func(), error) {
	grpc := policyGrpcConfig(cfg)
	policyServiceClient, cleanup, err := RegisterPolicyClient(grpc)
	if err != nil {
		return nil, nil, err
	}
	return policyServiceClient, func() {
		cleanup()
	}, nil
}
