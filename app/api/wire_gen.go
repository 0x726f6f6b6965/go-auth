// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"github.com/0x726f6f6b6965/go-auth/app/api/middleware"
	"github.com/0x726f6f6b6965/go-auth/config"
	"github.com/0x726f6f6b6965/go-auth/pkg/cache"
	"github.com/0x726f6f6b6965/go-auth/pkg/jwt-auth"
)

// Injectors from wire.go:

func InitMiddleware(cfg *config.AppConfig, auth *jwtauth.JwtAuth, cache2 cache.Cache) (*middleware.AuthMiddleware, func(), error) {
	grpc := policyGrpcConfig(cfg)
	policyServiceClient, cleanup, err := registerPolicyClient(grpc)
	if err != nil {
		return nil, nil, err
	}
	authMiddleware := middleware.NewAuthMiddleware(auth, policyServiceClient, cache2)
	return authMiddleware, func() {
		cleanup()
	}, nil
}

func InitCache(cfg *config.AppConfig) (cache.Cache, func(), error) {
	configRedisConfig := redisConfig(cfg)
	cacheCache, cleanup, err := cache.NewRedis(configRedisConfig)
	if err != nil {
		return nil, nil, err
	}
	return cacheCache, func() {
		cleanup()
	}, nil
}

func InitJwtAuth(cfg *config.AppConfig) *jwtauth.JwtAuth {
	jwtauthConfig := jwtAuthConfig(cfg)
	jwtAuth := jwtauth.NewJWTAuth(jwtauthConfig)
	return jwtAuth
}
